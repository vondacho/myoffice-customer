allprojects {
    apply plugin: 'java'
    group 'edu.noia.myoffice'
    version = '0.0.9'
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        mavenLocal()
        maven {
            name 'mavenRemote'
            url myMavenRepoReadUrl
            credentials {
                username myMavenRepoReadUsername
                password myMavenRepoReadPassword
            }
        }
    }
}

buildscript {
    ext {
        myofficeCommonVersion = '0.0.7'
        springBootVersion = '2.0.0.RC1'
        springHalBrowserVersion = '3.0.3.RELEASE'
        springfoxVersion = '2.8.0'
        lombokVersion = '1.16.18'
        mokitoVersion = '2.8.47'
        jacksonVersion = '2.9.2'
        h2databaseVersion = '1.4.196'
        flywayVersion = '5.0.7'
        googlePhoneVersion = '8.8.6'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath 'io.franzbecker:gradle-lombok:1.10'
    }
}

gradle.taskGraph.whenReady { graph ->
    def badTasks = ['startScripts', 'distTar', 'distZip']
    graph.allTasks.findAll {it.name in badTasks}.each { task ->
        task.enabled = false
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.franzbecker.gradle-lombok'
    sourceCompatibility = 1.8
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
    dependencies {
        compile("org.projectlombok:lombok:${lombokVersion}")
        testCompile("org.mockito:mockito-core:${mokitoVersion}")
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }
    publishing {
        repositories {
            mavenLocal()
            maven {
                name 'mavenRemote'
                url myMavenRepoWriteUrl
                credentials {
                    username myMavenRepoWriteUsername
                    password myMavenRepoWritePassword
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
    lombok {
        version = "${lombokVersion}"
        sha256 = "" // skip verify Lombok task
    }
    task install(dependsOn: publishToMavenLocal)
    task deploy(dependsOn: publish)

    bootJar.enabled = false
    jar.enabled = true
}

project(':myoffice-customer-batch') {
    dependencies {
        compile project(':myoffice-customer-domain')
    }
}

project(':myoffice-customer-data') {
    dependencies {
        compile project(':myoffice-customer-domain')
        compile project(':myoffice-customer-messaging')
    }
}

project(':myoffice-customer-rest') {
    dependencies {
        compile project(':myoffice-customer-domain'),
                project(':myoffice-customer-data'),
                project(':myoffice-customer-batch')
    }
}

project(':myoffice-customer-ui') {
    dependencies {
        compile project(':myoffice-customer-rest')
    }
}

project(':myoffice-customer-application') {
    dependencies {
        compile project(':myoffice-customer-domain'),
                project(':myoffice-customer-batch'),
                project(':myoffice-customer-data'),
                project(':myoffice-customer-messaging'),
                project(':myoffice-customer-rest'),
                project(':myoffice-customer-ui')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}